BIGLIST = ['n', None, 'Num?: ', 'P7', 'TC', 'BT', None, 'n', 'Oi', 'Sd', 'Num?: ', '? [y/n] ', '? [y/n] ', 'KZ', '? [y/n] ', 'Num?: ', 'eA', 'Num?: ', 'Num?: ', 'CN', 'Ud', 'n', 'Ty', 'Num?: ', '9z', None, None, None, 'dj', 'WR', '? [y/n] ', 'ty', '? [y/n] ', 'n', 'JM', 'wR', 'Ja', '? [y/n] ', 'Ex', 'Zr', 'ZJ', 'tz', 'Num?: ', 'n', 'KT', 'Dh', 'n', 'CP', 'n', 'X9', 'C4', 'VY', None, '? [y/n] ', '8W', 'Num?: ', '5N', 'n', 'vu', 'Num?: ', 'yQ', None, 'S3', 'n', 'ET', 'Ss', '? [y/n] ', 'Num?: ', '8a', '52', '4q', 'Num?: ', 'n', 'ME', '? [y/n] ', 'eJ', 'FLAG{', '87', 'Yp', 'F8', 'WF', 'mz', '? [y/n] ', 'UA', 'n', 'CJ', 'n', 'Yr', 'n', 'yC', 'KA', None, '? [y/n] ', 'u9', 'C6', 'kG', None, 'oQ', 'Num?: ', 'Num?: ', 'n', 'GX', None, 'HY', 'Num?: ', '? [y/n] ', 'Ym', 'Num?: ', 'Pf', 'Num?: ', 'n', 'RT', '4a', 'n', None, 'QP', '8T', 's4', '? [y/n] ', None, 'je', 'PO', 'n', None, 'DC', 'n', 'kK', 'EQ', '5B', 'BE', 'Cm', 'Num?: ', '8F', 'Fz', None, 'Num?: ', 'fG', 'pQ', 've', 'np', '? [y/n] ', '? [y/n] ', 'Num?: ', '? [y/n] ', None, '4V', 'qi', '7T', '? [y/n] ', 'n', None, '? [y/n] ', 'Num?: ', 'dB', 'Zt', 'Uq', 'Zs', None, 'FQ', 'GT', '45', 'x9', 'Qu', '? [y/n] ', None, 'Dm', None, 'bj', 'cE', None, 'RV', None, '7C', 'Num?: ', '? [y/n] ', '? [y/n] ', None, 'n', 'VW', 'Num?: ', None, 'Num?: ', 'qW', 'rI', 'Num?: ', '? [y/n] ', 'n', 'hK', 'n', '? [y/n] ', 'n', 'n', 'TJ', 'zS', 'oh', 'rN', '? [y/n] ', 'n', 'XK', 'n', 'qj', 'cc', '? [y/n] ', 'sB', 'qN', 'n', None, 'Wg', 'Ji', 'm7', 'n', 'n', 'RN', 'uu', 'oK', 'Num?: ', '? [y/n] ', 'Pe', None, 'n', 'n', None, 'pZ', 'zB', 'Num?: ', '? [y/n] ', 'n', 'sr', '? [y/n] ', '? [y/n] ', 'n', 'Num?: ', 'n', None, None, 'Num?: ', 'WZ', None, 'Num?: ', '}', 'Num?: ', None, 'qQ', 'Num?: ', None, 'LU', None, 'n', 'fy', 'oM', '? [y/n] ', '? [y/n] ', 'KJ', '? [y/n] ', None, 'n', 'RZ', 'kN', 'jB', 'n', 'Xz', None, 'ly', 'G5', '5Z', 'n', '? [y/n] ', 'Num?: ', '? [y/n] ', 'VV', '? [y/n] ', 'kN', 'my', 'n', None, 'Num?: ', 'kd', None, '6E', 'Yr', '? [y/n] ', None, '? [y/n] ', 'n', None, 'gl', 'dY', 'Num?: ', 'Num?: ', 'vy', 'Num?: ', 'D8', 'Wo', '? [y/n] ', 'Xz', '8T', 'Di', 'Yy', 'Rs', '? [y/n] ', 'Num?: ', 'n', 'Num?: ', 'n', 'Num?: ', 'n', 'h5', '? [y/n] ', None, 'n', 'n', 'n', 'n', 'Num?: ', 'rV', 'Num?: ', 'Ye', '? [y/n] ', '5d', None, 'yL', '? [y/n] ', 'JR', 'ef', None, 'n', '? [y/n] ', 'bI', 'qz', 'up', '? [y/n] ', 'Num?: ', 'SQ', 'TU', 'MN', None, 'Cb', None, '4n', 'Eq', 'Mo', None, 'n', 'DB', 'Pd', 'Vv', 'rw', 'Num?: ', 'Bl', 'kK', '? [y/n] ', 'n', 'Num?: ', 'p8', 'IM', 'qC', 'Va', '? [y/n] ', 'n', 'Num?: ', 'LQ', 'KE', 'n', 'n', 'Kz', '? [y/n] ', None, '? [y/n] ', 'Oy', 'zy', '? [y/n] ', 'hv', 'mT', 'yt', 'eS', 'n', 'VU', 'px', 'qn', 'Num?: ', 'ox', 'AD', '__main__', None, 'j4', '? [y/n] ', 'Ii', 'lv', 'tF', 'n', 'rw', 'ez', 'pA', None, 'UA', None, 'H2', 'n', 'wl', 'Num?: ', 'Num?: ', 'Num?: ', 'n', None, 'Qd', None, 'ix', '? [y/n] ', 'Gc', 'Num?: ', 'Num?: ', 'dX', 'tC', 'n', 'Cu', 'EG', 'Num?: ', 'dm', 'eZ', None, 'RR', 'V7', 'CI', 'Num?: ', '? [y/n] ', 'n', '3L', 'bK', 'Num?: ', 'Lv', None, 'VQ', 'rt', None, 'bS', 'zt', 'Num?: ', 'wI', 'Num?: ', 'av', '? [y/n] ', '? [y/n] ', '7G', 'iN', 'cb', None, None, 'n', 'eu', None, 'Ed', 'Num?: ', 'n', 'n', 'n', 'es', 'cs', 'Ka', 'q9', 'Yy', 'eP', 'gf', 'os', '? [y/n] ', 'sv', 'HY', 'dk', 'Num?: ', '? [y/n] ', '? [y/n] ', 'vt', None, 'n', '5T', 'Pm', '5E', '8W', 'jB', 'n', 'Num?: ', 'vh', 'aj', 'Kn', '? [y/n] ', 'Me', 'gC', 'Tq', 'uj', 'Num?: ', 's5', 'AO', 'M6', 'CO', 'VA', '? [y/n] ', 'ME', None, '? [y/n] ', None, None, '? [y/n] ', '? [y/n] ', 'aN', '? [y/n] ', 'Num?: ', '? [y/n] ', '? [y/n] ', 'fe', None, 'BQ', None, 'Num?: ', 'O0OOOO0OOO0000000OOO0O00O000O00O']

pls = """[0, 1, 2, 3, 4, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[446]", 6, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[176]", 8, 9, 10, 11, 12, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[335]", 14, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[6]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[261]", 17, 18, 19, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[281]", 21, 22, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[123]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[25]", 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[27]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[61]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[274]", 39, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[433]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O [449]", 42, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[383]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[157]", 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[164]", 61, 62, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[319]", 64, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[430]", 66, 67, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[1]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[218]", 70, 71, 72, 73, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[119]", 75, 76, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[324]", 78, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[91]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[284]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O [96]", 82, 83, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[471]", 85, 86, 87, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[496]", 89, 90, 91, 92, 93, 94, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[393]", 96, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[403]]", 98, 99, 100, 101, 102, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[206]", 104, 105, 106, 107, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[26]", 109, 110, 111, 112, 113, 114, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[254]", "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[114]", 117, 118, 119, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[166]", 121, 122, 123, 124, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[277]", 126, 127, 128, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[134]", 130, 131, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[102]", 133, 134, 135, 136, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[445]", 138, 139, 140, 141, 142, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[171]", 144, 145, 146, 147, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[144]", 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[395]]", 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[234]", 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[244]", 201, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[510]", 203, 204, 205, 206, 207, 208, 209, 210, 211, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[508]", 213, 214, 215, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[341]", 217, 218, 219, 220, 221, 222, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[150]", 224, 225, 226, 227, 228, 229, 230, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[237]", 232, 233, 234, 235, 236, 237, 238, 239, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[308]", 241, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[233]", 243, 244, 245, 246, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[52]", 248, 249, 250, "O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[221]", 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]"""


import json

for idx,v in enumerate(json.loads(pls)):
    if isinstance(v, str):
        wat = v.split('[')
        if len(wat) > 2:
            print(wat)
            continue
        arr_idx = int(wat[1][:-1])
        assert BIGLIST[arr_idx] is None
        BIGLIST[arr_idx] = idx
        print("REP", arr_idx, idx)



for i,j in enumerate(BIGLIST):
    if j is None:
        print("None at", i)


assert not None in BIGLIST

with open('clean.py', 'r') as f:
    out = f.read()

for i,rep in enumerate(BIGLIST):
    out = out.replace(f'O0O0O0O0O00OOO0O0O000O0OO00OOOOO00OO0OOOO0O0O0OO0O00OOO0OOO000O0O[{i}]', repr(rep))


with open('replaced.py', 'w') as f:
    f.write(out)
