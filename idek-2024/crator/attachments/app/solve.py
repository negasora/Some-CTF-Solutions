#def safe_open(file, mode="r"):
#    if mode != "r":
#        raise RuntimeError("Nein")
#    file = str(file)
#    if file.endswith(".expected"):
#        raise RuntimeError("Nein")
#    return open(file, "r")
#
#def unsafe_open(a):
#    if a != 1:
#        print(3)

bytecode = b'\x95\x02\x97\x00|\x01d\x01k\x03\x00\x00\x00\x00r\x0ft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x02\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x82\x01t\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00}\x00|\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x89\x03d\x03z\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00r\x0ft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x02\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x82\x01\x02\x00\x89\x02|\x00d\x01\xa6\x02\x00\x00\xab\x02\x00\x00\x00\x00\x00\x00\x00\x00S\x00'


import dis
print(dis.dis(bytecode))

bytecode = safe_open.__code__.co_code

bytecode = bytearray(bytecode)
bytecode[79] = 1
bytecode = bytes(bytecode)
print(dis.dis(bytecode))
safe_open.__code__ = safe_open.__code__.replace(co_code=bytecode)


safe_open('a.expected')
